#!/usr/bin/env python3
"""
G1 Experiment: MSC + SG 1st Derivative + LightGBM + Bayesian Optimization
Gender Classification for HSI Egg Data

This script runs the complete G1 experiment pipeline:
1. Data preprocessing (MSC + Savitzky-Golay 1st derivative)
2. Model training (LightGBM with Bayesian optimization)
3. Model evaluation and results saving
"""

import os
import sys
import time
from datetime import datetime

def run_preprocessing():
    """
    Run preprocessing step
    """
    print("="*60)
    print("STEP 1: PREPROCESSING")
    print("="*60)
    
    # Import and run preprocessing
    from G1_preprocessing import main as preprocess_main
    preprocess_main()

def run_modeling():
    """
    Run modeling step
    """
    print("\n" + "="*60)
    print("STEP 2: MODELING")
    print("="*60)
    
    # Import and run modeling
    from G1_model import main as model_main
    model_main()

def create_experiment_summary():
    """
    Create experiment summary report
    """
    print("\n" + "="*60)
    print("CREATING EXPERIMENT SUMMARY")
    print("="*60)
    
    # Get list of generated files
    files = os.listdir('.')
    data_files = [f for f in files if f.endswith(('.npy', '.csv', '.pkl', '.txt'))]
    
    summary = f"""
# G1 Experiment Summary
**Experiment:** Gender Classification with MSC + SG 1st Derivative + LightGBM + Bayesian Optimization
**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Methodology
- **Preprocessing:** Multiplicative Scatter Correction (MSC) + Savitzky-Golay 1st Derivative
- **Algorithm:** LightGBM with Bayesian Hyperparameter Optimization
- **Features:** Full spectrum (all wavelengths)
- **Task:** Binary gender classification (Male vs Female)

## Data
- **Source:** HSI egg data Day 0 (pre-incubation)
- **Features:** {300} wavelength measurements
- **Samples:** Training + Test split (80/20)

## Files Generated
"""
    
    for file in sorted(data_files):
        file_size = os.path.getsize(file)
        if file_size > 1024*1024:
            size_str = f"{file_size/(1024*1024):.1f} MB"
        elif file_size > 1024:
            size_str = f"{file_size/1024:.1f} KB"
        else:
            size_str = f"{file_size} B"
        summary += f"- `{file}` ({size_str})\n"
    
    summary += f"""
## Key Results
- Model training completed successfully
- Feature importance analysis available
- Test predictions saved for further analysis

## Next Steps
- Analyze feature importance for biological insights
- Compare with other preprocessing methods (G2-G8)
- Consider ensemble approaches

---
*Generated by G1 experiment pipeline*
"""
    
    with open('G1_experiment_summary.md', 'w') as f:
        f.write(summary)
    
    print("✓ Experiment summary saved to G1_experiment_summary.md")

def main():
    """
    Main experiment pipeline
    """
    start_time = time.time()
    
    print("="*80)
    print("G1 EXPERIMENT: MSC + SG 1st Derivative + LightGBM + Bayesian Optimization")
    print("="*80)
    print(f"Start time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Working directory: {os.getcwd()}")
    
    try:
        # Step 1: Preprocessing
        run_preprocessing()
        
        # Step 2: Modeling
        run_modeling()
        
        # Step 3: Summary
        create_experiment_summary()
        
        # Final summary
        end_time = time.time()
        duration = end_time - start_time
        
        print("\n" + "="*80)
        print("G1 EXPERIMENT COMPLETED SUCCESSFULLY!")
        print("="*80)
        print(f"Total duration: {duration/60:.1f} minutes")
        print(f"End time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # List all generated files
        files = [f for f in os.listdir('.') if f.endswith(('.npy', '.csv', '.pkl', '.txt', '.md'))]
        print(f"\nGenerated {len(files)} files:")
        for file in sorted(files):
            print(f"  ✓ {file}")
        
        print("\nExperiment data ready for analysis!")
        
    except Exception as e:
        print(f"\n❌ Experiment failed with error: {e}")
        print("Check the error messages above for troubleshooting.")
        sys.exit(1)

if __name__ == "__main__":
    main() 